use std::io::{stdin, stdout, Write};
use std::net::UdpSocket;
use termion::event::Key;
use termion::input::TermRead;
use termion::raw::IntoRawMode;

fn main() {
    let stdin = stdin();
    let mut stdout = stdout().into_raw_mode().unwrap();
    let socket = UdpSocket::bind("0.0.0.0:13849").unwrap();
    socket.connect("192.168.0.131:3333").unwrap();

    write!(
        stdout,
        "{}{}Use the arrow keys to control the RC car.{}",
        termion::clear::All,
        termion::cursor::Goto(1, 1),
        termion::cursor::Hide
    )
    .unwrap();
    stdout.flush().unwrap();

    for c in stdin.keys() {
        write!(
            stdout,
            "{}{}",
            termion::cursor::Goto(1, 1),
            termion::clear::CurrentLine
        )
        .unwrap();
        print!("state: ");

        match c.unwrap() {
            Key::Char('q') => break,
            Key::Up => socket.send(&[0b1010]),
            Key::Down => socket.send(&[0b0101]),
            Key::Right => socket.send(&[0b0110]),
            Key::Left => socket.send(&[0b1001]),
            _ => socket.send(&[0]),
        }
        .unwrap();

        stdout.flush().unwrap();
    }

    write!(stdout, "{}", termion::cursor::Show).unwrap();
}

struct MotorState {
    // {right,left}{positive,negative}
    rp: u8,
    rn: u8,
    lp: u8,
    ln: u8,
}

fn update_motors(sock: &UdpSocket, st: &MotorState) {
    sock.send(&[st.rn, st.rp, st.ln, st.lp]);
}
